import streamlit as st

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤—ã–Ω–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ) ===
def check_password():
    def login_form():
        st.markdown("### üîí –î–æ—Å—Ç—É–ø –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")
        with st.form("login"):
            st.text_input("–õ–æ–≥–∏–Ω", key="username")
            st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="password")
            if st.form_submit_button("–í–æ–π—Ç–∏"):
                if (
                    st.session_state.username == st.secrets["AUTH_USERNAME"]
                    and st.session_state.password == st.secrets["AUTH_PASSWORD"]
                ):
                    st.session_state.authenticated = True
                    del st.session_state.username
                    del st.session_state.password
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        login_form()
        st.stop()

check_password()

# === –û–°–ù–û–í–ù–û–ô –ö–û–î ===
import pandas as pd
import plotly.express as px
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import json
import pytz
import time

st.set_page_config(page_title="–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥", layout="wide")

# === GLOBAL CSS / STYLE (–≤ —Å—Ç–∏–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞) ===
st.markdown(
    """
    <style>
    :root{
      --accent:#0ea5e9;
      --muted:#6b7280;
      --card-bg: #ffffff;
      --surface:#f8fafc;
      --primary:#1e3a8a;
      --success:#10b981;
      --shadow: 0 6px 18px rgba(15, 23, 42, 0.06);
    }
    /* page */
    .main { background-color: var(--surface); padding: 28px 36px !important; }

    /* header */
    .dash-title {
      display:flex;
      gap:12px;
      align-items:center;
      margin-bottom:6px;
    }
    .dash-title h1{
      font-size:28px;
      margin:0;
      color:var(--primary);
      font-weight:800;
    }
    .dash-title .subtitle{
      color:var(--muted);
      font-size:14px;
      margin-top:4px;
    }

    /* metric cards row */
    .metrics-row { display:flex; gap:18px; margin-top:18px; margin-bottom:20px; flex-wrap:wrap; }
    .metric-card {
      background: var(--card-bg);
      border-radius:12px;
      padding:18px;
      width:100%;
      box-shadow: var(--shadow);
      border: 1px solid rgba(15,23,42,0.03);
    }
    @media (min-width: 900px){
        .metric-card { width: 24%; }
    }
    .metric-label { color:var(--muted); font-size:13px; margin-bottom:6px; }
    .metric-value { font-size:26px; font-weight:800; color: #0f172a; }
    .metric-delta { font-size:12px; color:var(--success); margin-top:6px; }

    /* cards container for charts */
    .card { background:var(--card-bg); padding:18px; border-radius:12px; box-shadow: var(--shadow); border: 1px solid rgba(15,23,42,0.03); }
    .card-title { font-weight:700; color:#0f172a; margin-bottom:8px; font-size:15px; }
    .card-sub { color:var(--muted); font-size:12px; margin-bottom:12px; }

    /* table header */
    .detail-title { margin-top:18px; font-size:18px; font-weight:700; color:#0f172a; margin-bottom:10px; }

    /* small helper */
    .small-muted { color:var(--muted); font-size:12px; }
    </style>
    """,
    unsafe_allow_html=True,
)

# === HEADER ===
st.markdown(
    """
    <div class="dash-title">
      <div style="font-size:32px; color:var(--accent);">üíß</div>
      <div>
        <h1>–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥</h1>
        <div class="subtitle">2025 –≥–æ–¥ ‚Äì –†–í–ö</div>
      </div>
    </div>
    """,
    unsafe_allow_html=True,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ ===
SHEET_NAMES = {
    "jan": "jan", "feb": "feb", "mar": "mar", "apr": "apr", "may": "may",
    "jun": "june", "jul": "jule", "aug": "aug", "sep": "sept", "oct": "oct",
    "nov": "nov", "dec": "dec", "year": "gen"
}

DISPLAY_NAMES = {
    "jan": "–Ø–Ω–≤", "feb": "–§–µ–≤", "mar": "–ú–∞—Ä", "apr": "–ê–ø—Ä", "may": "–ú–∞–π",
    "jun": "–ò—é–Ω", "jul": "–ò—é–ª", "aug": "–ê–≤–≥", "sep": "–°–µ–Ω", "oct": "–û–∫—Ç",
    "nov": "–ù–æ—è", "dec": "–î–µ–∫", "year": "–ì–æ–¥"
}

# === –ö–Ω–æ–ø–∫–∏ –º–µ—Å—è—Ü–µ–≤ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤ —Ä—è–¥, —Å—Ç–∏–ª—å–Ω—ã–µ ===
st.markdown("<div class='small-muted'>–ü–µ—Ä–∏–æ–¥:</div>", unsafe_allow_html=True)
month_cols = st.columns(6)
months = list(DISPLAY_NAMES.items())
for i, (key, name) in enumerate(months):
    col = month_cols[i % 6]
    if col.button(name, key=f"btn_{key}", use_container_width=True):
        st.session_state.selected = key

selected = st.session_state.get("selected", "year")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
@st.cache_resource
def get_client():
    try:
        info = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    except KeyError:
        creds = Credentials.from_service_account_file(
            "credentials.json",
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    return gspread.authorize(creds)

def load_data(period_key: str) -> pd.DataFrame:
    client = get_client()
    sheet_name = SHEET_NAMES[period_key]
    for attempt in range(3):
        try:
            worksheet = client.open_by_key("1v6GS19Ib3wnl5RGpDz31KPzDJ5T1pxd6rx1aTYzy63k").worksheet(sheet_name)
            values = worksheet.get("A4:F13")
            break
        except gspread.exceptions.APIError as e:
            if hasattr(e, "response") and getattr(e.response, "status_code", None) == 500 and attempt < 2:
                time.sleep(1.5 ** attempt)
                continue
            else:
                raise
    columns = ["organization", "total", "closed", "open", "cancelled", "erroneous"]
    if not values:
        return pd.DataFrame(columns=columns)
    cleaned = [row for row in values if row and str(row[0]).strip()]
    normalized = []
    for row in cleaned:
        while len(row) < len(columns):
            row.append("")
        normalized.append(row[:len(columns)])
    return pd.DataFrame(normalized, columns=columns)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
try:
    df = load_data(selected)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Å—Ç–∞ '{SHEET_NAMES[selected]}': {e}")
    st.stop()

numeric_cols = ["total", "closed", "open", "cancelled", "erroneous"]
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

# === –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏) ===
total = int(df["total"].sum())
closed = int(df["closed"].sum())
open_ = int(df["open"].sum())
cancelled = int(df["cancelled"].sum())

# –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ HTML –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–∏–∑–∞–π–Ω–∞
def render_metric_card(label: str, value: int, delta_text: str = "", accent: str = ""):
    delta_html = f'<div class="metric-delta">{delta_text}</div>' if delta_text else ""
    return f"""
    <div class="metric-card">
      <div class="metric-label">{label}</div>
      <div class="metric-value">{value}</div>
      {delta_html}
    </div>
    """

cards_html = (
    render_metric_card("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", total, "", "blue") +
    render_metric_card("–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫", closed, "100% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" if total>0 and closed==total else "") +
    render_metric_card("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫", open_, "–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è" if open_>0 else "") +
    render_metric_card("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", cancelled, "–û—à–∏–±–æ—á–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ" if cancelled>0 else "")
)

st.markdown(f'<div class="metrics-row">{cards_html}</div>', unsafe_allow_html=True)

# === –ì—Ä–∞—Ñ–∏–∫–∏ (–ª–µ–≤–æ: –ø–∏—Ä–æ–≥, –ø—Ä–∞–≤–æ: —Å—Ç–æ–ª–±—Ü—ã) –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö ===
active = df[df["total"] > 0].copy()
if active.empty:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.")
else:
    chart_data = active[["organization", "total", "closed"]].rename(columns={
        "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
        "total": "–í—Å–µ–≥–æ",
        "closed": "–ó–∞–∫—Ä—ã—Ç–æ"
    })

    col_left, col_right = st.columns([1, 1], gap="large")

    with col_left:
        st.markdown('<div class="card"><div class="card-title">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º</div>', unsafe_allow_html=True)
        fig1 = px.pie(
            chart_data,
            values="–í—Å–µ–≥–æ",
            names="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
            hole=0.45,
            color_discrete_sequence=px.colors.sequential.Blues
        )
        fig1.update_traces(textposition="inside", textinfo="percent+label",
                           hovertemplate="<b>%{label}</b><br>–ó–∞—è–≤–æ–∫: %{value}<extra></extra>")
        fig1.update_layout(margin=dict(t=10, b=10, l=10, r=10), showlegend=True, legend=dict(orientation="h", y=-0.12, x=0.5))
        st.plotly_chart(fig1, use_container_width=True, config={"displayModeBar": False})
        st.markdown('</div>', unsafe_allow_html=True)

    with col_right:
        st.markdown('<div class="card"><div class="card-title">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º</div><div class="card-sub">–í—Å–µ–≥–æ vs –ó–∞–∫—Ä—ã—Ç–æ</div>', unsafe_allow_html=True)
        bar_data = chart_data.melt(id_vars="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", value_vars=["–í—Å–µ–≥–æ", "–ó–∞–∫—Ä—ã—Ç–æ"])
        COLOR_MAP = {"–í—Å–µ–≥–æ": "#3b82f6", "–ó–∞–∫—Ä—ã—Ç–æ": "#10b981"}
        fig2 = px.bar(
            bar_data,
            x="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
            y="value",
            color="variable",
            barmode="group",
            color_discrete_map=COLOR_MAP,
            labels={"value": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": ""}
        )
        fig2.update_layout(margin=dict(t=6, b=80, l=10, r=10), legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
        fig2.update_traces(hovertemplate="<b>%{x}</b><br>%{y}<extra></extra>")
        fig2.update_xaxes(tickangle=-45)
        st.plotly_chart(fig2, use_container_width=True, config={"displayModeBar": False})
        st.markdown('</div>', unsafe_allow_html=True)

# === –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ ===
st.markdown('<div class="detail-title">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>', unsafe_allow_html=True)

display_df = df.rename(columns={
    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "total": "–í—Å–µ–≥–æ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–æ",
    "open": "–û—Ç–∫—Ä—ã—Ç–æ",
    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    "erroneous": "–û—à–∏–±–æ—á–Ω–æ"
})

# –û—Ç–æ–±—Ä–∞–∑–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ Streamlit, –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
st.markdown('<div class="card">', unsafe_allow_html=True)
st.dataframe(display_df, use_container_width=True, hide_index=True)
st.markdown('</div>', unsafe_allow_html=True)

# === –ü–æ–¥–ø–∏—Å—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º ===
astana_tz = pytz.timezone("Asia/Almaty")
current_time = datetime.now(astana_tz).strftime('%d.%m.%Y %H:%M')
st.markdown(f'<div style="margin-top:10px;" class="small-muted">–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {current_time} (–ê—Å—Ç–∞–Ω–∞)</div>', unsafe_allow_html=True)
