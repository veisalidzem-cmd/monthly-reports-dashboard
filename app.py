import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import json
import pytz

st.set_page_config(page_title="–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥", layout="wide")

# === –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ ===
st.markdown("""
<style>
    .main { background-color: #f8fafc; }
    .stApp { background-color: #f8fafc; }
    h1 {
        color: #0f172a;
        font-weight: 700;
        margin-bottom: 0.3em;
    }
    h2 {
        color: #1e293b;
        font-weight: 600;
        margin-top: 1.5em;
    }
    [data-testid="stMetricValue"] {
        font-size: 1.8rem !important;
        font-weight: 700;
    }
    [data-testid="stMetricLabel"] {
        font-size: 1rem !important;
        color: #475569;
    }
    .dataframe {
        font-size: 0.95rem;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }
    .dataframe th {
        background-color: #e2e8f0 !important;
        color: #1e293b !important;
        font-weight: 600;
    }
    .dataframe td {
        background-color: white !important;
        color: #334155 !important;
    }
    .stSelectbox > div > div {
        border: 1px solid #cbd5e1;
        border-radius: 8px;
        padding: 4px 8px;
    }
</style>
""", unsafe_allow_html=True)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
SHEET_ID = "1v6GS19Ib3wnl5RGpDz31KPzDJ5T1pxd6rx1aTYzy63k"

SHEET_NAMES = {
    "jan": "jan", "feb": "feb", "mar": "mar", "apr": "apr", "may": "may",
    "jun": "jun", "jul": "jul", "aug": "aug", "sep": "sep", "oct": "oct",
    "nov": "nov", "dec": "dec", "year": "gen"
}

DISPLAY_NAMES = {
    "jan": "–Ø–Ω–≤", "feb": "–§–µ–≤", "mar": "–ú–∞—Ä", "apr": "–ê–ø—Ä", "may": "–ú–∞–π",
    "jun": "–ò—é–Ω", "jul": "–ò—é–ª", "aug": "–ê–≤–≥", "sep": "–°–µ–Ω", "oct": "–û–∫—Ç",
    "nov": "–ù–æ—è", "dec": "–î–µ–∫", "year": "–ì–æ–¥"
}

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
@st.cache_resource
def get_client():
    try:
        info = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    except KeyError:
        creds = Credentials.from_service_account_file(
            "credentials.json",
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    return gspread.authorize(creds)

def load_data(period_key: str) -> pd.DataFrame:
    client = get_client()
    sheet_name = SHEET_NAMES[period_key]
    worksheet = client.open_by_key(SHEET_ID).worksheet(sheet_name)
    
    range_name = "A4:F13"
    try:
        values = worksheet.get(range_name)
    except Exception:
        values = []
    
    columns = ["organization", "total", "closed", "open", "cancelled", "erroneous"]
    
    if not values:
        return pd.DataFrame(columns=columns)
    
    cleaned = [row for row in values if row and str(row[0]).strip()]
    normalized = []
    for row in cleaned:
        while len(row) < len(columns):
            row.append("")
        normalized.append(row[:len(columns)])
    
    return pd.DataFrame(normalized, columns=columns)

# === UI ===
st.set_page_config(page_title="–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥", layout="wide")

st.title("–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥")
st.subheader("2025 –≥–æ–¥ - –†–í–ö")

selected = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
    options=list(DISPLAY_NAMES.keys()),
    format_func=lambda x: DISPLAY_NAMES[x],
    index=0
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    df = load_data(selected)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ '{SHEET_NAMES[selected]}': {e}")
    st.stop()

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–∞
numeric_cols = ["total", "closed", "open", "cancelled", "erroneous"]
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
active = df[df["total"] > 0].copy()
active["org_label"] = active["organization"].apply(lambda x: x[:15] + "..." if len(x) > 15 else x)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total = df["total"].sum()
closed = df["closed"].sum()
open_ = df["open"].sum()
cancelled = df["cancelled"].sum()

# –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–º–æ–¥–∑–∏
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("üìÑ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", total)
with col2:
    st.metric("‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö", closed, delta="100%" if total == closed and total > 0 else None)
with col3:
    st.metric("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö", open_, delta="–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è" if open_ > 0 else None)
with col4:
    st.metric("‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö", cancelled)

# –ì—Ä–∞—Ñ–∏–∫–∏
if not active.empty:
    g1, g2 = st.columns(2)
    
    with g1:
        fig1 = px.pie(
            active,
            values="total",
            names="organization",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º",
            hole=0.4,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig1.update_traces(textposition="inside", textinfo="percent+label")
        fig1.update_layout(
            title_x=0.5,
            showlegend=False,
            margin=dict(t=50, b=20, l=20, r=20)
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with g2:
        active_display = active.rename(columns={
            "closed": "–ó–∞–∫—Ä—ã—Ç–æ",
            "open": "–û—Ç–∫—Ä—ã—Ç–æ",
            "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ"
        })
        fig2 = px.bar(
            active_display,
            x="org_label",
            y=["–ó–∞–∫—Ä—ã—Ç–æ", "–û—Ç–∫—Ä—ã—Ç–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"],
            title="–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫",
            labels={"value": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "org_label": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"},
            barmode="stack",
            color_discrete_map={
                "–ó–∞–∫—Ä—ã—Ç–æ": "#4ade80",
                "–û—Ç–∫—Ä—ã—Ç–æ": "#fbbf24",
                "–û—Ç–º–µ–Ω–µ–Ω–æ": "#f87171"
            }
        )
        fig2.update_layout(
            title_x=0.5,
            xaxis_tickangle=-45,
            margin=dict(t=50, b=100, l=40, r=20),
            legend_title_text="–°—Ç–∞—Ç—É—Å"
        )
        st.plotly_chart(fig2, use_container_width=True)
else:
    st.info("–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏.")

# –¢–∞–±–ª–∏—Ü–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
display_df = df.rename(columns={
    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "total": "–í—Å–µ–≥–æ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–æ",
    "open": "–û—Ç–∫—Ä—ã—Ç–æ",
    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    "erroneous": "–û—à–∏–±–æ—á–Ω–æ"
})
st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.dataframe(display_df, use_container_width=True)

# –í—Ä–µ–º—è –≤ –ê—Å—Ç–∞–Ω–µ
astana_tz = pytz.timezone("Asia/Almaty")
current_time = datetime.now(astana_tz).strftime('%d.%m.%Y %H:%M')
st.caption(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {current_time}")
