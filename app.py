import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import json
import pytz

# ‚¨áÔ∏è –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ Streamlit
st.set_page_config(page_title="–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥", layout="wide")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏ —Ü–≤–µ—Ç–æ–≤ ===
with st.sidebar:
    st.markdown("### üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
    theme = st.radio("–¢–µ–º–∞", ["–°–≤–µ—Ç–ª–∞—è", "–¢—ë–º–Ω–∞—è"], index=0, horizontal=True)
    st.markdown("### üñ®Ô∏è –ü–µ—á–∞—Ç—å")
    st.info("–î–ª—è –ø–µ—á–∞—Ç–∏: Ctrl+P ‚Üí ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF¬ª")

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
COLORS = {
    "primary": "#0d9488",
    "secondary": "#0ea5e9",
    "warning": "#f59e0b",
    "danger": "#ef4444",
    "light_bg": "#ffffff",
    "dark_bg": "#0f172a",
    "light_text": "#1e293b",
    "dark_text": "#f1f5f9"
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º bg –∏ text –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ CSS
if theme == "–¢—ë–º–Ω–∞—è":
    bg = COLORS["dark_bg"]
    text = COLORS["dark_text"]
else:
    bg = COLORS["light_bg"]  # –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    text = COLORS["light_text"]

# === CSS: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π + –ø–µ—á–∞—Ç—å + –º–æ–±–∏–ª—å–Ω—ã–π ===
st.markdown(f"""
<style>
    .main {{ background-color: {bg}; color: {text}; padding: 10px !important; }}
    .stApp {{ background-color: {bg}; }}

    h1 {{ font-size: 1.8rem; margin-bottom: 0.4em; font-weight: 700; }}
    h2 {{ font-size: 1.4rem; margin-top: 1.2em; margin-bottom: 0.6em; font-weight: 600; }}

    /* –ö–Ω–æ–ø–∫–∏ ‚Äî —É–¥–æ–±–Ω—ã–µ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è */
    .stButton > button {{
        height: 48px !important;
        font-size: 1rem !important;
        font-weight: 500 !important;
        padding: 0 12px !important;
        white-space: nowrap !important;
        border-radius: 8px !important;
        width: 100% !important;
    }}

    @media (max-width: 480px) {{
        .stButton > button {{
            font-size: 0.95rem !important;
            height: 46px !important;
        }}
        h1 {{ font-size: 1.6rem !important; }}
        h2 {{ font-size: 1.3rem !important; }}
    }}

    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="stMetricLabel"] {{ font-size: 0.9rem !important; }}
    [data-testid="stMetricValue"] {{ font-size: 1.4rem !important; }}

    /* –ì—Ä–∞—Ñ–∏–∫–∏ */
    .plotly-graph-div {{
        border-radius: 8px !important;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05) !important;
        margin-bottom: 12px !important;
    }}

    /* –¢–∞–±–ª–∏—Ü–∞ */
    .dataframe {{
        font-size: 0.95rem;
        border-radius: 6px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        margin-bottom: 16px;
    }}
    .dataframe th, .dataframe td {{
        padding: 8px 10px !important;
    }}

    /* –ü–µ—á–∞—Ç—å */
    @media print {{
        .sidebar, .stSidebar, [data-testid="stSidebar"],
        .stButton, .stRadio, .stCheckbox {{
            display: none !important;
        }}
        .main {{ padding: 0 !important; }}
        .plotly-graph-div {{ box-shadow: none !important; }}
        body {{
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
        }}
    }}
</style>
""", unsafe_allow_html=True)

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.title("üíß –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¶–î–° –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥")
st.subheader("2025 –≥–æ–¥ ‚Äì –†–í–ö")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ ===
SHEET_NAMES = {
    "jan": "jan",
    "feb": "feb",
    "mar": "mar",
    "apr": "apr",
    "may": "may",
    "jun": "june",    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    "jul": "jule",    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    "aug": "aug",
    "sep": "sept",    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    "oct": "oct",
    "nov": "nov",
    "dec": "dec",
    "year": "gen"
}

DISPLAY_NAMES = {
    "jan": "–Ø–Ω–≤", "feb": "–§–µ–≤", "mar": "–ú–∞—Ä", "apr": "–ê–ø—Ä", "may": "–ú–∞–π",
    "jun": "–ò—é–Ω", "jul": "–ò—é–ª", "aug": "–ê–≤–≥", "sep": "–°–µ–Ω", "oct": "–û–∫—Ç",
    "nov": "–ù–æ—è", "dec": "–î–µ–∫", "year": "–ì–æ–¥"
}

MONTH_KEYS = list(DISPLAY_NAMES.keys())

# === –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ—Å—è—Ü–µ–≤ ===
st.markdown("#### –ü–µ—Ä–∏–æ–¥:")

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
buttons_per_row = 4
months = list(DISPLAY_NAMES.items())

for i in range(0, len(months), buttons_per_row):
    row = months[i:i + buttons_per_row]
    cols = st.columns(len(row))
    for j, (key, name) in enumerate(row):
        with cols[j]:
            if st.button(
                name,
                key=f"btn_{key}",
                use_container_width=True
            ):
                st.session_state.selected = key

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —è–Ω–≤–∞—Ä—å
selected = st.session_state.get("selected", "jan")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
@st.cache_resource
def get_client():
    try:
        info = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    except KeyError:
        creds = Credentials.from_service_account_file(
            "credentials.json",
            scopes=[
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
        )
    return gspread.authorize(creds)

def load_data(period_key):
    client = get_client()
    sheet_name = SHEET_NAMES[period_key]
    worksheet = client.open_by_key("1v6GS19Ib3wnl5RGpDz31KPzDJ5T1pxd6rx1aTYzy63k").worksheet(sheet_name)
    try:
        values = worksheet.get("A4:F13")
    except Exception:
        values = []
    columns = ["organization", "total", "closed", "open", "cancelled", "erroneous"]
    if not values:
        return pd.DataFrame(columns=columns)
    cleaned = [row for row in values if row and str(row[0]).strip()]
    normalized = []
    for row in cleaned:
        while len(row) < len(columns):
            row.append("")
        normalized.append(row[:len(columns)])
    return pd.DataFrame(normalized, columns=columns)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
try:
    df = load_data(selected)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Å—Ç–∞ '{SHEET_NAMES[selected]}': {e}")
    st.stop()

numeric_cols = ["total", "closed", "open", "cancelled", "erroneous"]
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
total = df["total"].sum()
closed = df["closed"].sum()
open_ = df["open"].sum()
cancelled = df["cancelled"].sum()

col1, col2, col3, col4 = st.columns(4)
with col1: st.metric("üìÑ –í—Å–µ–≥–æ", total)
with col2: st.metric("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ", closed)
with col3: st.metric("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç–æ", open_)
with col4: st.metric("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", cancelled)

# === –ì—Ä–∞—Ñ–∏–∫–∏ ===
active = df[df["total"] > 0].copy()
if not active.empty:
    active["org_label"] = active["organization"].apply(lambda x: x[:12] + "..." if len(x) > 12 else x)
    
    g1, g2 = st.columns(2)
    with g1:
        fig1 = px.pie(
            active,
            values="total",
            names="organization",
            hole=0.4,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig1.update_traces(
            textposition="inside",
            textinfo="percent+label",
            hovertemplate="<b>%{label}</b><br>–ó–∞—è–≤–æ–∫: %{value}<extra></extra>"
        )
        fig1.update_layout(
            title="–ü–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º",
            title_x=0.5,
            showlegend=False,
            margin=dict(t=40, b=10, l=10, r=10),
            font_size=11
        )
        st.plotly_chart(fig1, use_container_width=True, config={"displayModeBar": False})
    
    with g2:
        active_disp = active.rename(columns={
            "closed": "–ó–∞–∫—Ä—ã—Ç–æ",
            "open": "–û—Ç–∫—Ä—ã—Ç–æ",
            "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ"
        })
        fig2 = px.bar(
            active_disp,
            x="org_label",
            y=["–ó–∞–∫—Ä—ã—Ç–æ", "–û—Ç–∫—Ä—ã—Ç–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"],
            barmode="stack",
            color_discrete_map={
                "–ó–∞–∫—Ä—ã—Ç–æ": COLORS["primary"],
                "–û—Ç–∫—Ä—ã—Ç–æ": COLORS["warning"],
                "–û—Ç–º–µ–Ω–µ–Ω–æ": COLORS["danger"]
            }
        )
        fig2.update_layout(
            title="–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫",
            title_x=0.5,
            xaxis_tickangle=-45,
            margin=dict(t=40, b=80, l=30, r=10),
            font_size=10,
            showlegend=False
        )
        fig2.update_traces(hovertemplate="<b>%{x}</b><br>%{series}: %{y}<extra></extra>")
        st.plotly_chart(fig2, use_container_width=True, config={"displayModeBar": False})

# === –¢–∞–±–ª–∏—Ü–∞ ===
display_df = df.rename(columns={
    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "total": "–í—Å–µ–≥–æ",
    "closed": "–ó–∞–∫—Ä—ã—Ç–æ",
    "open": "–û—Ç–∫—Ä—ã—Ç–æ",
    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    "erroneous": "–û—à–∏–±–æ—á–Ω–æ"
})
st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.dataframe(display_df, use_container_width=True, hide_index=True)

# === –ü–æ–¥–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –ê—Å—Ç–∞–Ω—ã ===
astana_tz = pytz.timezone("Asia/Almaty")
current_time = datetime.now(astana_tz).strftime('%d.%m.%Y %H:%M')
st.caption(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {current_time} (–ê—Å—Ç–∞–Ω–∞)")
